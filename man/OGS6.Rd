% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ogs6.R
\name{OGS6}
\alias{OGS6}
\title{OGS6}
\description{
Constructor for the \code{OGS6} base class
}
\examples{

## ------------------------------------------------
## Method `OGS6$new`
## ------------------------------------------------

ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")

## ------------------------------------------------
## Method `OGS6$add`
## ------------------------------------------------

ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add(prj_parameter(name = "foo", type = "bar"))

## ------------------------------------------------
## Method `OGS6$add_gml`
## ------------------------------------------------

ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add_gml("this_works.gml")
\dontrun{ogs6_obj$add_gml("this_doesnt.oops")}

## ------------------------------------------------
## Method `OGS6$add_mesh`
## ------------------------------------------------

ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add_mesh("this_works.vtu")
\dontrun{ogs6_obj$add_mesh("this_doesnt.oops")}

## ------------------------------------------------
## Method `OGS6$update_component`
## ------------------------------------------------

\dontrun{ogs6_obj$update_component(list(
                   list("ogs6_obj$parameters[[1]]$value", 2.3),
                   list("ogs6_obj$media[[1]]$properties[[2]]$value",
                        1.0e-3)))}

## ------------------------------------------------
## Method `OGS6$get_status`
## ------------------------------------------------

ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$get_status()
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{sim_name}}{Simulation name. \code{value} must be string}

\item{\code{sim_path}}{Simulation path. \code{value} must be string}

\item{\code{logfile}}{Logfile path. \code{value} must be string}

\item{\code{gml}}{\code{.gml}. read-only}

\item{\code{geometry}}{\code{.prj} \code{geometry} tag. \code{value} must be string}

\item{\code{meshes}}{\code{.prj} \code{meshes} tag. \code{value} must be list of strings}

\item{\code{vtus}}{\code{.vtu}s. \code{value} must be list of \code{OGS6_vtu} objects}

\item{\code{python_script}}{\code{.prj} \code{python_script} tag. \code{value} must be string}

\item{\code{search_length_algorithm}}{\code{.prj} \code{search_length_algorithm} tag. \code{value} must be
\code{prj_search_length_algorithm} object}

\item{\code{processes}}{\code{.prj} \code{processes} tag. \code{value} must be list of
\code{prj_process} objects}

\item{\code{time_loop}}{\code{.prj} \code{time_loop} tag. \code{value} must be
\code{prj_time_loop} object}

\item{\code{local_coordinate_system}}{\code{.prj} \code{local_coordinate_system} tag. \code{value} must be
\code{prj_local_coordinate_system} object}

\item{\code{media}}{\code{.prj} \code{media} tag. \code{value} must be list of
\code{prj_medium} objects}

\item{\code{parameters}}{\code{.prj} \code{parameters} tag. \code{value} must be list of
\code{prj_parameter} objects}

\item{\code{chemical_system}}{\code{.prj} \code{chemical_system} tag. \code{value} must be
\code{prj_chemical_system} object}

\item{\code{curves}}{\code{.prj} \code{curves} tag. \code{value} must be list of
\code{prj_curve} objects}

\item{\code{process_variables}}{\code{.prj} \code{process_variables} tag. \code{value} must be list of
\code{prj_process_variable} objects}

\item{\code{nonlinear_solvers}}{\code{.prj} \code{nonlinear_solvers} tag. \code{value} must be list of
\code{prj_nonlinear_solver} objects}

\item{\code{linear_solvers}}{\code{.prj} \code{linear_solvers} tag. \code{value} must be list of
\code{prj_linear_solver} objects}

\item{\code{test_definition}}{\code{.prj} \code{test_definition} tag. \code{value} must be list of
\code{prj_vtkdiff} objects}

\item{\code{insitu}}{\code{.prj} \code{insitu} tag. \code{value} must be
\code{prj_insitu} object}

\item{\code{pvds}}{\code{.pvd}s. \code{value} must be list of \code{OGS6_pvd} objects}

\item{\code{h5s}}{\code{h5s} \code{value} must be of class \code{H5IdComponent}
as returned by \code{rhdf5::h5read()}.}

\item{\code{mshs}}{\code{mshs} \code{value} must be an object of class \code{OGS6_msh}.}

\item{\code{include}}{\code{include} \code{value} must be a string.}

\item{\code{rasters}}{\code{.prj} \code{rasters} tag. \code{value} must be list of
\code{prj_raster} objects}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-OGS6-new}{\code{OGS6$new()}}
\item \href{#method-OGS6-add}{\code{OGS6$add()}}
\item \href{#method-OGS6-add_gml}{\code{OGS6$add_gml()}}
\item \href{#method-OGS6-add_mesh}{\code{OGS6$add_mesh()}}
\item \href{#method-OGS6-update_component}{\code{OGS6$update_component()}}
\item \href{#method-OGS6-get_status}{\code{OGS6$get_status()}}
\item \href{#method-OGS6-print}{\code{OGS6$print()}}
\item \href{#method-OGS6-print_log}{\code{OGS6$print_log()}}
\item \href{#method-OGS6-clear}{\code{OGS6$clear()}}
\item \href{#method-OGS6-clone}{\code{OGS6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-new"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-new}{}}}
\subsection{Method \code{new()}}{
Creates new OGS6 object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$new(sim_name, sim_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sim_name}}{string: Simulation name}

\item{\code{sim_path}}{string: Path where all files for the simulation will be
saved}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-add"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-add}{}}}
\subsection{Method \code{add()}}{
Adds a .prj simulation component
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$add(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{An object of any .prj `prj` class}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add(prj_parameter(name = "foo", type = "bar"))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-add_gml"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-add_gml}{}}}
\subsection{Method \code{add_gml()}}{
Adds a reference to a file with ending .gml and optionally, a
\code{OGS6_gml} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$add_gml(gml)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gml}}{string | OGS6_gml: Either a path to a file with extension
.gml or a OGS6_gml object.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add_gml("this_works.gml")
\dontrun{ogs6_obj$add_gml("this_doesnt.oops")}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-add_mesh"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-add_mesh}{}}}
\subsection{Method \code{add_mesh()}}{
Adds a reference to a \code{.vtu} file and optionally, a \code{OGS6_vtu}
object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$add_mesh(path, axisym = FALSE, read_in_vtu = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{string: A path}

\item{\code{axisym}}{flag: Is the mesh axially symmetrical?}

\item{\code{read_in_vtu}}{flag: Optional: Should \code{.vtu} file just be
copied or read in too?}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$add_mesh("this_works.vtu")
\dontrun{ogs6_obj$add_mesh("this_doesnt.oops")}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-update_component"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-update_component}{}}}
\subsection{Method \code{update_component()}}{
Update a component of the \code{OGS6} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$update_component(cmpts)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cmpts}}{list(sublist, length(sublist) == 2): The first element
of a sublist is a character that calls an \code{OGS6} component, the
second one is the corresponding value.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{ogs6_obj$update_component(list(
                   list("ogs6_obj$parameters[[1]]$value", 2.3),
                   list("ogs6_obj$media[[1]]$properties[[2]]$value",
                        1.0e-3)))}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-get_status"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-get_status}{}}}
\subsection{Method \code{get_status()}}{
Checks if the \code{OGS6} object has all necessary parameters for
starting a simulation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$get_status(print_status = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{print_status}}{flag: Should the status be printed to the console?}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ogs6_obj <- OGS6$new(sim_name = "my_sim", sim_path = "my/path")
ogs6_obj$get_status()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-print"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-print}{}}}
\subsection{Method \code{print()}}{
Overrides default printing behaviour
print_log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-print_log"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-print_log}{}}}
\subsection{Method \code{print_log()}}{
Prints logfile to console (if it exists)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$print_log()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-clear"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-clear}{}}}
\subsection{Method \code{clear()}}{
Clears components from the \code{OGS6} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$clear(which)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{which}}{character: The names of the components (all by default).
If you want to delete only some components, run
\code{names(ogs6_prj_top_level_classes())} for the available options.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OGS6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-OGS6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OGS6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
